mod-linked-data:
  reindex:
    page-size: 1000
  kafka:
    topic:
      search-bibframe-index: search.bibframe
      inventory-instance-ingress: inventory.instance_ingress

folio:
  environment: ${ENV:folio}
  okapiUrl: ${okapi.url}
  tenant:
    validation:
      enabled: true
  logging:
    request:
      enabled: true
    feign:
      enabled: true
  retry:
    enabled: true
  kafka:
    listener:
      data-import-instance-create:
        concurrency: ${KAFKA_DATA_IMPORT_INSTANCE_CREATE_CONCURRENCY:1}
        topic-pattern: ${KAFKA_DI_INSTANCE_CREATED_TOPIC_PATTERN:(${folio.environment}\.)(.*\.)DI_COMPLETED}
        group-id: ${folio.environment}-linked-data-data-import-instances-created-group
    retry-interval-ms: ${KAFKA_RETRY_INTERVAL_MS:2000}
    retry-delivery-attempts: ${KAFKA_RETRY_DELIVERY_ATTEMPTS:6}
    topics:
      - name: ${mod-linked-data.kafka.topic.search-bibframe-index:search.bibframe}
        numPartitions: ${KAFKA_BIBFRAME_TOPIC_PARTITIONS:3}
        replicationFactor: ${KAFKA_BIBFRAME_TOPIC_REPLICATION_FACTOR:}
      - name: ${mod-linked-data.kafka.topic.inventory-instance-ingress:inventory.instance_ingress}
        numPartitions: ${KAFKA_BIBFRAME_TOPIC_PARTITIONS:3}
        replicationFactor: ${KAFKA_BIBFRAME_TOPIC_REPLICATION_FACTOR:}

spring:
  kafka:
    bootstrap-servers: ${KAFKA_HOST:kafka}:${KAFKA_PORT:9092}
    consumer:
      max-poll-records: ${KAFKA_CONSUMER_MAX_POLL_RECORDS:200}
    security:
      protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
    ssl:
      key-store-password: ${KAFKA_SSL_KEYSTORE_PASSWORD:}
      key-store-location: ${KAFKA_SSL_KEYSTORE_LOCATION:}
      trust-store-password: ${KAFKA_SSL_TRUSTSTORE_PASSWORD:}
      trust-store-location: ${KAFKA_SSL_TRUSTSTORE_LOCATION:}
    producer:
      acks: all
      properties:
        enable.idempotence: true
        max.in.flight.requests.per.connection: 5
        retries: 5
        spring.json.add.type.headers: false
